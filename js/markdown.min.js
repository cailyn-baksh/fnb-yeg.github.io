let genUniqueID=()=>Number((Math.floor(65536*Math.random())<<16|65535&Date.now())>>>0).toString(16);class MarkupEntity{constructor(tag,attributes={}){this.tag=tag,this.attributes=attributes}generateEntity(){return""}}class TextEntity extends MarkupEntity{constructor(content){super(null),this.content=content}addContent(content){this.content+=content}generateEntity(){return this.content}}class TerminatingEntity extends MarkupEntity{generateEntity(){let attributeString="";for(let[key,value]of Object.entries(this.attributes))attributeString+=null!==value?` ${key}="${value}"`:` ${key}`;return`<${this.tag}${attributeString} />`}}class NestableEntity extends MarkupEntity{constructor(tag,attributes={},childAttributes={}){super(tag,attributes),this.childAttributes=childAttributes,this.children=[],this.parent=null}addChild(child){if(Object.keys(this.childAttributes).includes(child.tag))for(let attrib of Object.keys(this.childAttributes[child.tag]))child.attributes[attrib]=(child.attributes[attrib]?child.attributes[attrib]:"")+this.childAttributes[child.tag][attrib];return child.parent=this,this.children.push(child),this}get lastChild(){return this.children[this.children.length-1]}get root(){return this.parent?this.parent.root:this}set lastChild(child){this.children[this.children.length-1]=child}generateEntity(){let attributeString="";for(let[key,value]of Object.entries(this.attributes))attributeString+=null!==value?` ${key}="${value}"`:` ${key}`;let generated=[];for(let child of this.children)generated.push(child.generateEntity());return`<${this.tag}${attributeString}>${generated.join("")}</${this.tag}>`}}class Cards{static recipe(markdown,root){let cardBody=new NestableEntity("div",{class:"card-body"});parseMarkdown(markdown,cardBody,{1:()=>new NestableEntity("div",{class:"row justify-content-center"}),"2:":()=>new NestableEntity("div",{class:"content"}),"2:4":()=>new NestableEntity("div",{class:"row"}),"2,3,4":()=>new NestableEntity("div",{class:"col-sm-12 col-md-4"},{p:{class:"lead"}})}),root.addChild(cardBody)}static news_basic(markdown,root){parseMarkdown(markdown,root,{1:()=>new NestableEntity("div",{class:"card-header"}),"2:":()=>new NestableEntity("div",{class:"card-body"},{p:{class:"mb-1"},img:{class:"img-fluid"}})})}static news_img(markdown,root){parseMarkdown(markdown,root,{1:()=>new NestableEntity("div",{},{img:{class:"card-img-top"}}),"2:":()=>new NestableEntity("div",{class:"card-body"},{p:{class:"mb-1"},img:{class:"img-fluid"}}),"2:3":()=>new NestableEntity("div",{class:"d-flex w-100 justify-content-between"},{h5:{class:"mb-1"},p:{style:"font-size:0.8em"}})})}static news_img_collapse(markdown,root){let collapseID=genUniqueID();parseMarkdown(markdown,root,{1:()=>new NestableEntity("div",{},{img:{class:"card-img-top"}}),"2:":()=>new NestableEntity("div",{class:"card-body"}),",2:":()=>new NestableEntity("div",{class:"collapse",id:collapseID},{p:{class:"mb-1"},img:{class:"img-fluid"}})});for(let i=0;i<root.children.length;++i)"class"in root.children[i].attributes&&root.children[i].attributes.class.includes("card-body")&&root.children[i].children.unshift(new NestableEntity("p").addChild(new NestableEntity("a",{"data-toggle":"collapse",href:`#${collapseID}`,role:"button","aria-expanded":"false","aria-controls":collapseID}).addChild(new TextEntity("[View Image Transcription]"))))}}function doesSchemaApplyToLine(lineno,schema){const RANGE=-1,AFTER=-2,BEFORE=-3;let lines=[],currentNo=0;for(let i=0;i<schema.length;++i){let charCode=schema.charCodeAt(i);if(charCode>=48&&charCode<=57)currentNo*=10,currentNo+=charCode-48;else if(lines.push(currentNo),currentNo=0,58===charCode){if(0===i||-1===lines[lines.length-1])return 0;lines.push(-1)}else{if(44===charCode)continue;if(62===charCode){if(0===i||-2===lines[lines.length-1])return 0;lines.push(-2)}else{if(60!==charCode)return 0;if(0===i||-3===lines[lines.length-1])return 0;lines.push(-3)}}}0!==currentNo&&lines.push(currentNo);let shouldAdd=!1,shouldRemove=!1;for(let i=0;i<lines.length;++i)if(-1===lines[i]){if(0===i)return 0;if(lineno>=lines[i-1]&&(i+1===lines.length||lineno<=lines[i+1]))return shouldAdd?1:0}else{if(-3===lines[i]||-2===lines[i]){if(0===i)return 0;if(-2===lines[i-1]||-1===lines[i-1]||-3===lines[i-1])return 0;let delta;return lineno+(-3===lines[i]?1:-1)===lines[i-1]?1:lineno===lines[i-1]?-1:0}lines[i]===lineno?shouldAdd=!0:lines[i]===lineno-1&&-1!==lines[i+1]&&(shouldRemove=!0)}return shouldAdd&&shouldRemove?-2:shouldAdd?1:shouldRemove?-1:0}function parseMarkdown(markdown,root,schema={}){const NONE=0,PARAGRAPH=1,UL=2,OL=3,TABLE=4,QUOTE=5,imageRegex=/^!\[([^\]]+)\]\(([^"]+?)\)$/,ulRegex=/^([ \t]*?)([-–—*•])[ \t]+(?<content>.*)$/,olRegex=/^([ \t]*?)(\d+|[a-zA-Z]+)([.)])[ \t]+(?<content>.*)$/,tableRegex=/\|(.+?)(?=\|)/g,tableFmtRegex=/\|([:-]{3,})(?=\|)/g,blockquoteRegex=/^>[\s]*(.*)/,blockquoteAttributionRegex=/^\s*-{1,2}(.*)$/,LEFT=0,CENTER=1,RIGHT=2;let rootStack=[],parent=null,parentType=0,listIndent=0,columnAlignment=[],olMatches=[],lineno=1,getLowestRoot=()=>rootStack.length>0?rootStack[rootStack.length-1].entity:root,terminateOl=()=>{let listClass="";olMatches.every(e=>e[1].split("").every(c=>c.charCodeAt(0)>=48&&c.charCodeAt(0)<=57))?listClass="arabic":olMatches.every(e=>e[1].split("").every(c=>"ivxlcdm".includes(c)))?listClass="lower-roman":olMatches.every(e=>e[1].split("").every(c=>"IVXLCDM".includes(c)))?listClass="upper-roman":olMatches.every(e=>e[1].split("").every(c=>c.charCodeAt(0)>=97&&c.charCodeAt(0)<=122))?listClass="lower-latin":olMatches.every(e=>e[1].split("").every(c=>c.charCodeAt(0)>=65&&c.charCodeAt(0)<=90))&&(listClass="upper-latin"),""!==listClass&&olMatches.every(e=>")"===e[2].charAt(0))&&(listClass+="-paren"),parent.attributes.class&&(listClass+=parent.attributes.class),parent.attributes.class=listClass,olMatches=[]};for(let i=0;i<markdown.length;++i,++lineno){let line=markdown[i],match;if(""!==line){for(;rootStack.length>0;){let applies=doesSchemaApplyToLine(lineno,rootStack[rootStack.length-1].target);if(-1!==applies&&-2!==applies)break;{let lastItem=rootStack.pop();getLowestRoot().addChild(lastItem.entity)}}for(let k of Object.keys(schema)){let applies=doesSchemaApplyToLine(lineno,k);1!==applies&&-2!==applies||rootStack.push({target:k,entity:schema[k]()})}if("---"!==line)if("!"!==line[0]||null===(match=imageRegex.exec(line))){if(0===parentType||1===parentType)if(null!==(match=ulRegex.exec(line))){parent=new NestableEntity("ul",{class:"*•".includes(match[2].charAt(0))?"":"list-dashed"});let element=new NestableEntity("li");listIndent=match[1].length,applyInlineFormatting(element,match.groups.content),parent.addChild(element),getLowestRoot().addChild(parent),parentType=2}else if(null!==(match=olRegex.exec(line))){parent=new NestableEntity("ol");let element=new NestableEntity("li");applyInlineFormatting(element,match.groups.content),olMatches.push([match[1],match[2],match[3]]),parent.addChild(element),getLowestRoot().addChild(parent),parentType=3}else if(null!==line.match(tableRegex)){if(null!==markdown[i+1].match(tableFmtRegex)){parent=new NestableEntity("table",{class:"table table-bordered"});let head=new NestableEntity("thead"),row=new NestableEntity("tr");for(;null!==(match=tableFmtRegex.exec(markdown[i+1]));){let lastIndex=match[1].length-1;":"===match[1][0]&&":"===match[1][lastIndex]?columnAlignment.push(1):":"===match[1][lastIndex]?columnAlignment.push(2):columnAlignment.push(0)}let column=0;for(;null!==(match=tableRegex.exec(line));){let style;switch(columnAlignment[column]){case 0:style="text-align: left;";break;case 1:style="text-align: center;";break;case 2:style="text-align: right;"}let cell=new NestableEntity("th",{style:style});applyInlineFormatting(cell,match[1].trim()),row.addChild(cell),++column}head.addChild(row),parent.addChild(head),getLowestRoot().addChild(parent),++i,parentType=4}}else if(">"===line[0]){parent=new NestableEntity("blockquote");let body=new NestableEntity("div",{class:"quote-body"}),paragraph=new NestableEntity("p"),match;applyInlineFormatting(paragraph,blockquoteRegex.exec(line)[1]),body.addChild(paragraph),parent.addChild(body),getLowestRoot().addChild(parent),parentType=5}else{let level=0;for(;"#"===line[level];++level);if(line=line.slice(level),1===parentType){if(!(0===level&&level<=6)){parentType=0,--i;continue}applyInlineFormatting(parent," "+line)}else 0===level&&level<=6?(parent=new NestableEntity("p"),parentType=1):parent=new NestableEntity(`h${level}`),applyInlineFormatting(parent,line),getLowestRoot().addChild(parent),parent=0===level?parent:null}else if(2===parentType){if(null===(match=ulRegex.exec(line))){parentType=0,listIndent=0,--i;continue}{let lineIndent=listItem("ul",parent,match,listIndent);lineIndent>listIndent&&(listIndent=lineIndent,parent=parent.lastChild)}}else if(3===parentType){if(null===(match=olRegex.exec(line))){parentType=0,listIndent=0,terminateOl(),--i;continue}{let newIndent=listItem("ol",parent,match,listIndent);olMatches.push([match[1],match[2],match[3]]),newIndent>listIndent&&(listIndent=newIndent,parent=parent.lastChild)}}else if(4===parentType){if(null===line.match(tableRegex)){parentType=0,--i;continue}{let body=new NestableEntity("tbody"),row=new NestableEntity("tr"),column=0;for(;null!==(match=tableRegex.exec(line));){let style;switch(columnAlignment[column]){case 0:style="text-align: left;";break;case 1:style="text-align: center;";break;case 2:style="text-align: right;"}let cell=new NestableEntity("td",{style:style});applyInlineFormatting(cell,match[1].trim()),row.addChild(cell),++column}body.addChild(row),parent.addChild(body)}}else if(5===parentType)if(null!==(match=blockquoteRegex.exec(line))){let paragraph=new NestableEntity("p");applyInlineFormatting(paragraph,match[1]),parent.lastChild.addChild(paragraph)}else{if(null===(match=blockquoteAttributionRegex.exec(line))){parentType=0,--i;continue}{let attribution=new NestableEntity("div",{class:"quote-attrib"});applyInlineFormatting(attribution,match[1]),parent.addChild(attribution),parentType=0}}}else{let element=new TerminatingEntity("img",{alt:match[1],src:match[2]});getLowestRoot().addChild(element)}else getLowestRoot().addChild(new TerminatingEntity("hr"))}else 3===parentType&&terminateOl(),parentType=0,--lineno}for(let i=rootStack.length;i>0;--i){let lastItem=rootStack.pop();getLowestRoot().addChild(lastItem.entity)}return root}function applyInlineFormatting(parent,line){const boldRegex=/(.*?)\*\*(.*?)\*\*(?!\*)(.*)/,italicRegex=/(.*?)\*(.*?)\*(.*)/,underlineRegex=/(.*?)__(.*?)__(.*)/,preformattedRegex=/(.*?)`(.*?)`(.*)/,superscriptRegex=/(.*?)\^\((.*?)\)(.*)/,subscriptRegex=/(.*?)\_\((.*?)\)(.*)/,strikethroughRegex=/(.*?)~~(.*?)~~(.*)/,linkForm1=/(.*?(?:^|[^!^]))\[([^\]]+)\]\(([^"]+?)\)(.*)/,linkForm2=/(.*?(?:^|[^!^]))\[([^\]]+)\]\(([^")]+?) "(.+?)"\)(.*)/,linkForm3=/(.*?)<([a-zA-Z0-9]+:\/\/[\w-.]+?.[\w-]+)>(.*)/,emailLink=/(.*?)<([a-zA-Z0-9!#$%&'*+-\/=?^_`{|}~.]+@[\w-.]+?.[\w-]+)>(.*)/g;let match;if(null!==(match=boldRegex.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("b");return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=italicRegex.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("i");return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=underlineRegex.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("u");return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=preformattedRegex.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("code");return element.addChild(new TextEntity(match[2])),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=superscriptRegex.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("sup");return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=subscriptRegex.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("sub");return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=strikethroughRegex.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("s");return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=linkForm1.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("a",{href:match[3]});return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[4])}if(null!==(match=linkForm2.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("a",{href:match[3],title:match[4]});return applyInlineFormatting(element,match[2]),parent.addChild(element),void applyInlineFormatting(parent,match[5])}if(null!==(match=linkForm3.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("a",{href:match[2]});return element.addChild(new TextEntity(match[2])),parent.addChild(element),void applyInlineFormatting(parent,match[3])}if(null!==(match=emailLink.exec(line))){applyInlineFormatting(parent,match[1]);let element=new NestableEntity("a",{href:`mailto:${match[2]}`});return element.addChild(new TextEntity(match[2])),parent.addChild(element),void applyInlineFormatting(parent,match[3])}parent.addChild(new TextEntity(line))}function listItem(tag,parent,match,indent){if(match[1].length>indent){indent=match[1].length;let sublist=new NestableEntity(tag),element=new NestableEntity("li");applyInlineFormatting(element,match.groups.content),sublist.addChild(element),parent.addChild(sublist)}else{let element=new NestableEntity("li");applyInlineFormatting(element,match.groups.content),parent.addChild(element)}return indent}document.addEventListener("DOMContentLoaded",(async function(){let targetDivs=document.getElementsByClassName("markdown");for(const target of targetDivs){if(!target instanceof HTMLElement)continue;let markdown;markdown="src"in target.dataset?await fetch(target.dataset.src,{mode:"same-origin"}).then(response=>response.text().then(text=>text.replace("\r","").split("\n"))):target.textContent.replace("\r","").split("\n").map(line=>line.trim());let card=new NestableEntity("div",{class:"card"});if(target.dataset.type&&"default"!==target.dataset.type)if("recipe"===target.dataset.type)Cards.recipe(markdown,card);else if("news-basic"===target.dataset.type)Cards.news_basic(markdown,card);else if("news-img"===target.dataset.type)Cards.news_img(markdown,card);else{if("news-img-collapse"!==target.dataset.type){console.log(target.dataset.type);continue}Cards.news_img_collapse(markdown,card)}else{let cardBody=new NestableEntity("div",{class:"card-body"},{p:{class:"mb-1"},img:{class:"img-fluid"}});parseMarkdown(markdown,cardBody),card.addChild(cardBody)}target.innerHTML=card.generateEntity()}}));